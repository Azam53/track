<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class Resource extends CI_Controller {

	/**
	 * Index Page for this controller.
	 *
	 * Maps to the following URL
	 * 		http://example.com/index.php/welcome
	 *	- or -
	 * 		http://example.com/index.php/welcome/index
	 *	- or -
	 * Since this controller is set as the default controller in
	 * config/routes.php, it's displayed at http://example.com/
	 *
	 * So any other public methods not prefixed with an underscore will
	 * map to /index.php/welcome/<method_name>
	 * @see https://codeigniter.com/user_guide/general/urls.html
	 */
        public function __construct()
   {
        parent::__construct();
        $this->load->database();
        $this->load->helper('url_helper');
        $this->load->library("session");
        // Your own constructor code
   }

   // function for safe landing if logged in then admin dashboard page or loginform
	public function index()
	{
           if ( empty($this->session->userdata("username")) )
            {
		$this->load->view('loginform');
            }
           else
            {
               $this->load->view('main');
            }    
	}
   // function for login 
        public function logincheck()
        {
             //$user = $this->input->post['user_name'];
             //$password = $this->input->post['password'];
          
               $username = $_POST['user_name'];
               $password = $_POST['password'];
            
               $query = $this->db->query("SELECT * FROM user WHERE username='$username' AND password='$password'");
               $result = $query->result_array($query);
                     if(count($result) > 0 )
                    {
                       $this->session->set_userdata("username",$username);
                       $this->load->view('main.php');
                    }
                    else
                    {
                      echo "Invalid Login Credentials";
                    }
           
         
        }
  // function for logout      
        public function logout()
        {
              $this->session->sess_destroy();
              $this->load->view('loginform');
        }     

        public function addclient()
        {
              $this->load->view('addclient');
        }

        public function adddriver()
        {
              $this->load->view('driver');
        }
   // function for inserting into client data into client table    
        public function insert_client()
        {
              $data['name']  = $_POST['name'];
              $place = $_POST['place'];
             
              $lat_long =$this->getlatlong($place);
             
              $data['flag'] = "C";
              $data['longitude'] = $lat_long['longitude'];
              $data['latitude'] = $lat_long['latitude'];
              $this->db->insert('client', $data); 
              redirect('resource/index'); 
        }
    
     // function for inserting into client data into driver table    
        public function insert_driver()
        {
              $data['name']  = $_POST['name'];
              $place = $_POST['place'];
             
              $lat_long =$this->getlatlong($place);
               
              $data['flag'] = "D";
              $data['longitude'] = $lat_long['longitude'];
              $data['latitude'] = $lat_long['latitude'];
              $this->db->insert('driver', $data); 
              redirect('resource/index'); 
        }
   
    // function for getting lattitude and longitude of requested place    
         public function getlatlong($place)
         {

         if(!empty($place))
        {
          //Formatted address
          $formattedAddr = str_replace(' ','+',$place);
          //Send request and receive json data by address
          $geocodeFromAddr = file_get_contents('https://maps.googleapis.com/maps/api/geocode/json?address='.  $formattedAddr.'&sensor=true_or_false&key=AIzaSyD0LN5EeORMn8Jh_4DQw7WForN0ABGM_Cw'); 
          $output = json_decode($geocodeFromAddr);
       
         //Get latitude and longitute from json data
         $data['latitude']  = $output->results[0]->geometry->location->lat; 
         $data['longitude'] = $output->results[0]->geometry->location->lng;
         //Return latitude and longitude of the given address
           if(!empty($data))
          {
              return $data;
           } else
          {
            return false;
          }
       }     else
         {
        return false;   
         }
       
      }
  
   // function to get all actors from database
       public function get_clients_from_DB()
      {
         // query for client data
          $query_client = $this->db->get('client');
          foreach ($query_client->result() as $row)
         {
              $temp_result[]['name'] = $row->name;
              $temp_result[]['lat']  = $row->latitude;
              $temp_result[]['long'] = $row->longitude;
              $temp_result[]['flag'] = $row->flag;
         } 
           
         // query for driver data
          $query_driver = $this->db->get('driver');
          foreach ($query_driver->result() as $row)
         {
              $temp_result[]['name'] = $row->name;
              $temp_result[]['lat']  = $row->latitude;
              $temp_result[]['long']  = $row->longitude;
              $temp_result[]['flag'] = $row->flag;
         } 
           echo json_encode($temp_result);
           
           
      }
    // function to show all clients info in detail
       public function show_client()
     {
       $i = 0;
       $result = array();
       $query_client = $this->db->get('client');
         foreach ($query_client->result() as $row)
         {   
              $result[$i]['id'] = $row->c_id;
              $result[$i]['name'] = $row->name;
              $i = $i + 1;
         } 
           $data['name'] = $result;
           
           $this->load->view("client",$data); 
     }
  // function to show all driver info in detail
       public function show_driver()
     {
       $i = 0;
       $result = array();
       $query_client = $this->db->get('driver');
         foreach ($query_client->result() as $row)
         {   
              $result[$i]['id'] = $row->d_id;
              $result[$i]['name'] = $row->name;
              $i = $i + 1;
         } 
           $data['name'] = $result;
           
           $this->load->view("driver_list",$data); 
     }

      public function delete_client()
     {
         $id = $_GET['client_id'];
         $this->db->delete('client', array('c_id' => $id)); 
     }
   
      public function delete_driver()
     {
         $id = $_GET['driver_id'];
         $this->db->delete('driver', array('d_id' => $id)); 
     }
 
     public function show_nearest_client()
     {
       $i = 0;
       $distance = array();
       $result_driver = array();
       $query_client = $this->db->get('driver');
       $count = $this->db->count_all('client');
         foreach ($query_client->result() as $row)
         {   
              $result_driver[$i]['id'] = $row->d_id;
              $result_driver[$i]['name'] = $row->name;
              $result_driver[$i]['latitude'] = $row->latitude;
              $result_driver[$i]['longitude'] = $row->longitude;
              $i = $i + 1;
         } 
           
       $i = 0;
       $result_client = array();
       $query_client = $this->db->get('client');
         foreach ($query_client->result() as $row)
         {   
              $result_client[$i]['id'] = $row->c_id;
              $result_client[$i]['name'] = $row->name;
              $result_client[$i]['latitude'] = $row->latitude;
              $result_client[$i]['longitude'] = $row->longitude;
              $i = $i + 1;
         } 
            
          foreach ($result_driver as $key1 => $value1)
         {   
             $i = 0;
            
             foreach ($result_client as $key => $value)
             {  
                $lat1 = $value1['latitude'];
                $long1 = $value1['longitude'];
                $lat2 = $value['latitude'];
                $long2 = $value['longitude'];
                $distance = $this-> getDistance($lat1,$long1,$lat2,$long2);
                $distances[$i]['distance'] = $distance; 
                $distances[$i]['name'] = $value['name'];
                $distances[$i]['driver_name'] = $value1['name'];
                $distances[$i]['ID'] = $value['id'];
                $i = $i + 1;
                
                  if($count == $i)
                 {
                     
                    $this->getLowestDistance($distances);
                      
                 }
               
             }
         }
            $i = 0;
           $near_client = array();
           $query_near_client = $this->db->get('near_client');
          foreach ($query_near_client->result() as $row)
         {   
              $near_client[$i]['id'] = $row->c_id;
              $near_client[$i]['client'] = $row->client;
              $near_client[$i]['driver'] = $row->driver;
              $near_client[$i]['distance'] = $row->distance;
              $near_client[$i]['time'] = $row->time;
              $i = $i + 1;
         }    
              $data['name'] = $near_client;
         $this->load->view('nearest_client',$data);  
     }

   public function getDistance($latitude1, $longitude1, $latitude2, $longitude2) {
    $earth_radius = 6371;

    $dLat = deg2rad($latitude2 - $latitude1);
    $dLon = deg2rad($longitude2 - $longitude1);

    $a = sin($dLat/2) * sin($dLat/2) + cos(deg2rad($latitude1)) * cos(deg2rad($latitude2)) * sin($dLon/2) * sin($dLon/2);
    $c = 2 * asin(sqrt($a));
    $d = $earth_radius * $c;

    return $d;
   } 

   
   public function getLowestDistance($distance_arr) {
     $lowest = $distance_arr[0]['distance'];
     $shortest_arr = array();
     $i = 1;
                         
      foreach ($distance_arr as $key => $value)
         {
                        
               if( $lowest > $value['distance']){
                 
                   $shortest_arr['id'] = $value['ID'];
                   $shortest_arr['client'] = $value['name'];
                   $shortest_arr['driver'] = $value['driver_name'];
                   $shortest_arr['distance'] = $value['distance'];
                   $shortest_arr['time'] = ($value['distance'] / 6);
                   $i = $i + 1;
                }
                if( $i == 1){
                 
                   $shortest_arr['id'] = $value['ID'];
                   $shortest_arr['client'] = $value['name'];
                   $shortest_arr['driver'] = $value['driver_name'];
                   $shortest_arr['distance'] = $value['distance'];
                   $shortest_arr['time'] = ($value['distance'] / 6);
                   $i = $i + 1;
                }
              
               
         }  
      
      $this->db->insert('near_client',$shortest_arr );         
      return 1;
     
    
   } 
         
      
}
